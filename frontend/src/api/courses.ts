import { Cycle, Class, Subject, Category, Theme } from "../types/courses";

// Fonction pour r√©cup√©rer les headers avec le token JWT
const getAuthHeaders = (): Record<string, string> => {
  const token = localStorage.getItem("token");
  return token
    ? { Authorization: `Bearer ${token}`, "Content-Type": "application/json" }
    : { "Content-Type": "application/json" };
};

// üîπ R√©cup√©rer tous les cycles avec leurs classes associ√©es
export const fetchCycles = async (): Promise<Cycle[]> => {
  const response = await fetch("/api/cycles", { headers: getAuthHeaders() });

  if (!response.ok) {
    throw new Error("Failed to fetch cycles with classes");
  }

  return await response.json();
};

// üîπ R√©cup√©rer les classes d‚Äôun cycle donn√©
export const fetchClassesByCycle = async (cycleId: string): Promise<Class[]> => {
  const response = await fetch(`/api/cycles/${cycleId}/classes`, { headers: getAuthHeaders() });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Failed to fetch classes: ${errorText}`);
  }

  return await response.json();
};

// üîπ R√©cup√©rer les mati√®res d‚Äôune classe donn√©e
export const fetchSubjectsByClass = async (classId: string): Promise<Subject[]> => {
  try {
    const response = await fetch(`/api/subjects/${classId}`, { headers: getAuthHeaders() });

    if (!response.ok) {
      throw new Error(`‚ùå Erreur API : ${response.status} ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des mati√®res :", error);
    return [];
  }
};

// üîπ Ajouter une mati√®re
export const createSubject = async (classId: string, subjectName: string): Promise<Subject> => {
  const response = await fetch("/api/subjects", {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify({ classId, subjectName }),
  });

  if (!response.ok) {
    throw new Error(`‚ùå Erreur API : ${response.status} ${response.statusText}`);
  }

  return await response.json();
};

// üîπ Modifier une mati√®re
export const updateSubject = async (subjectId: string, subjectName: string): Promise<Subject> => {
  const response = await fetch(`/api/subjects/${subjectId}`, {
    method: "PUT",
    headers: getAuthHeaders(),
    body: JSON.stringify({ subjectName }),
  });

  if (!response.ok) {
    throw new Error("Erreur lors de la modification de la mati√®re.");
  }

  return await response.json();
};

// üîπ Supprimer une mati√®re
export const deleteSubject = async (subjectId: string): Promise<void> => {
  const response = await fetch(`/api/subjects/${subjectId}`, {
    method: "DELETE",
    headers: getAuthHeaders(),
  });

  if (!response.ok) {
    throw new Error("Erreur lors de la suppression de la mati√®re.");
  }
};

// üîπ R√©cup√©rer les cat√©gories d‚Äôune mati√®re donn√©e
export const fetchCategoriesBySubject = async (subjectId: string): Promise<Category[]> => {
  try {
    const response = await fetch(`/api/categories/${subjectId}`, { headers: getAuthHeaders() });

    if (!response.ok) {
      throw new Error(`‚ùå Erreur API : ${response.status} ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des cat√©gories :", error);
    return [];
  }
};

// üîπ Ajouter une cat√©gorie
export const createCategory = async (subjectId: string, categoryName: string): Promise<Category> => {
  const response = await fetch("/api/categories", {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify({ subjectId, categoryName }),
  });

  if (!response.ok) {
    throw new Error("Erreur lors de la cr√©ation de la cat√©gorie.");
  }

  return await response.json();
};

// üîπ Modifier une cat√©gorie
export const updateCategory = async (categoryId: string, categoryName: string): Promise<Category> => {
  const response = await fetch(`/api/categories/${categoryId}`, {
    method: "PUT",
    headers: getAuthHeaders(),
    body: JSON.stringify({ categoryName }),
  });

  if (!response.ok) {
    throw new Error("Erreur lors de la modification de la cat√©gorie.");
  }

  return await response.json();
};

// üîπ Supprimer une cat√©gorie
export const deleteCategory = async (categoryId: string): Promise<void> => {
  const response = await fetch(`/api/categories/${categoryId}`, {
    method: "DELETE",
    headers: getAuthHeaders(),
  });

  if (!response.ok) {
    throw new Error("Erreur lors de la suppression de la cat√©gorie.");
  }
};

// üîπ R√©cup√©rer les th√®mes d‚Äôune cat√©gorie donn√©e
export const fetchThemesByCategory = async (categoryId: string): Promise<Theme[]> => {
  try {
    const response = await fetch(`/api/themes/${categoryId}`, { headers: getAuthHeaders() });

    if (!response.ok) {
      throw new Error(`‚ùå Erreur API : ${response.status} ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des th√®mes :", error);
    return [];
  }
};

// üîπ Ajouter un th√®me
export const createTheme = async (categoryId: string, themeName: string): Promise<Theme> => {
  const response = await fetch("/api/themes", {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify({ categoryId, themeName }),
  });

  if (!response.ok) {
    throw new Error("Erreur lors de la cr√©ation du th√®me.");
  }

  return await response.json();
};

// üîπ Modifier un th√®me
export const updateTheme = async (themeId: string, themeName: string): Promise<Theme> => {
  const response = await fetch(`/api/themes/${themeId}`, {
    method: "PUT",
    headers: getAuthHeaders(),
    body: JSON.stringify({ themeName }),
  });

  if (!response.ok) {
    throw new Error("Erreur lors de la modification du th√®me.");
  }

  return await response.json();
};

// üîπ Supprimer un th√®me
export const deleteTheme = async (themeId: string): Promise<void> => {
  const response = await fetch(`/api/themes/${themeId}`, {
    method: "DELETE",
    headers: getAuthHeaders(),
  });

  if (!response.ok) {
    throw new Error("Erreur lors de la suppression du th√®me.");
  }
};
