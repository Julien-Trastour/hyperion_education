import { 
  getAllCyclesWithClasses, 
  getClassById, 
  getClassesByCycle,
  getSubjectsByCycle, 
  getCategoriesByCycle, 
  getThemesByCycle,
  getSubjectsByClass 
} from '../models/cycleModel.js';

// üîπ R√©cup√©rer tous les cycles avec classes
export const fetchCyclesWithClasses = async (req, res) => {
  try {
    const cycles = await getAllCyclesWithClasses();
    res.json(cycles);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des cycles :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ R√©cup√©rer une classe par ID
export const fetchClassById = async (req, res) => {
  try {
    const { id } = req.params;
    const classe = await getClassById(id);

    if (!classe) {
      return res.status(404).json({ error: "Classe non trouv√©e" });
    }

    res.json(classe);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de la classe :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ R√©cup√©rer toutes les classes d‚Äôun cycle donn√©
export const fetchClassesByCycle = async (req, res) => {
  try {
    const { cycleId } = req.params;
    const classes = await getClassesByCycle(cycleId);

    if (!classes.length) {
      return res.status(404).json({ error: "Aucune classe trouv√©e pour ce cycle." });
    }

    res.json(classes);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des classes :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ R√©cup√©rer toutes les mati√®res d'un cycle donn√©
export const fetchSubjectsByCycle = async (req, res) => {
  try {
    const { cycleId } = req.params;
    const cycleData = await getSubjectsByCycle(cycleId);

    if (!cycleData) {
      return res.status(404).json({ error: "Cycle non trouv√©" });
    }

    res.json(cycleData);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des mati√®res du cycle :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ R√©cup√©rer toutes les mati√®res d'une classe donn√©e
export const fetchSubjectsByClass = async (req, res) => {
  try {
    const { classId } = req.params;
    console.log(`üì° Recherche des mati√®res pour la classe ${classId}`);

    const subjects = await getSubjectsByClass(classId);

    if (!subjects.length) {
      console.warn(`‚ö†Ô∏è Aucune mati√®re trouv√©e pour la classe ${classId}`);
      return res.status(200).json([]);
    }

    res.json(subjects);
  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ R√©cup√©rer toutes les cat√©gories d'un cycle donn√©
export const fetchCategoriesByCycle = async (req, res) => {
  try {
    const { cycleId } = req.params;
    const cycleData = await getCategoriesByCycle(cycleId);

    if (!cycleData) {
      return res.status(404).json({ error: "Cycle non trouv√©" });
    }

    res.json(cycleData);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des cat√©gories du cycle :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ R√©cup√©rer tous les th√®mes d'un cycle donn√©
export const fetchThemesByCycle = async (req, res) => {
  try {
    const { cycleId } = req.params;
    const cycleData = await getThemesByCycle(cycleId);

    if (!cycleData) {
      return res.status(404).json({ error: "Cycle non trouv√©" });
    }

    res.json(cycleData);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des th√®mes du cycle :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};
