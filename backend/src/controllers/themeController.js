import { getThemesByCategory, createTheme, updateTheme, deleteTheme } from "../models/themeModel.js";

// üîπ R√©cup√©rer tous les th√®mes d'une cat√©gorie
export const fetchThemesByCategory = async (req, res) => {
  try {
    const { categoryId } = req.params;
    const themes = await getThemesByCategory(categoryId);
    res.json(themes);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des th√®mes :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ Ajouter un nouveau th√®me
export const addTheme = async (req, res) => {
  try {
    const { themeName, categoryId } = req.body;
    if (!themeName || !categoryId) {
      return res.status(400).json({ error: "Donn√©es manquantes." });
    }

    const newTheme = await createTheme(themeName, categoryId);
    res.status(201).json(newTheme);
  } catch (error) {
    console.error("Erreur lors de la cr√©ation du th√®me :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ Modifier un th√®me
export const editTheme = async (req, res) => {
  try {
    const { id } = req.params;
    const { themeName } = req.body;
    if (!themeName) {
      return res.status(400).json({ error: "Donn√©es manquantes." });
    }

    const updatedTheme = await updateTheme(id, themeName);
    res.json(updatedTheme);
  } catch (error) {
    console.error("Erreur lors de la modification du th√®me :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ Supprimer un th√®me
export const removeTheme = async (req, res) => {
  try {
    const { id } = req.params;
    await deleteTheme(id);
    res.json({ message: "Th√®me supprim√© avec succ√®s." });
  } catch (error) {
    console.error("Erreur lors de la suppression du th√®me :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};
