import {
  getAllCycles,
  getClassesByCycleId,
  getSubjectsByClassId,
  getCategoriesBySubjectId,
  getThemesByCategoryId,
  getAllClasses,
  createSubject,
  updateSubject,
  deleteSubject,
  createCategory,
  updateCategory,
  deleteCategory,
  createTheme,
  updateTheme,
  deleteTheme,
  getPathwayContent,
  updatePathwayContent,
  getPathwaysWithRelations
} from "../models/pathwayModel.js";

/**
 * üìö R√©cup√©rer la liste des cycles
 * @route  GET /api/pathways/cycles
 * @access Admin
 */
export const getCycles = async (req, res) => {
  try {
    const cycles = await getAllCycles();
    res.status(200).json(cycles);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des cycles :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * üè´ R√©cup√©rer les classes d‚Äôun cycle
 * @route  GET /api/pathways/classes/:cycleId
 * @access Admin
 */
export const getClassesByCycle = async (req, res) => {
  try {
    const { cycleId } = req.params;
    const classes = await getClassesByCycleId(cycleId);
    res.status(200).json(classes);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des classes :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/* ========================================================
        Op√©rations CRUD Subjects
======================================================== */

/**
 * üìò R√©cup√©rer les mati√®res d‚Äôune classe
 * @route  GET /api/pathways/subjects/:classId
 * @access Admin
 */
export const getSubjectsByClass = async (req, res) => {
  try {
    const { classId } = req.params;
    const subjects = await getSubjectsByClassId(classId);
    res.status(200).json(subjects);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des mati√®res :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚ûï Cr√©er une mati√®re
 * @route  POST /api/pathways/subjects
 * @access Admin
 */
export const createSubjectController = async (req, res) => {
  try {
    const { classId, subjectName } = req.body;

    if (!classId || !subjectName) {
      return res.status(400).json({ error: "Tous les champs sont obligatoires." });
    }

    const subject = await createSubject(classId, subjectName);
    res.status(201).json(subject);
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de la mati√®re :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚úèÔ∏è Modifier une mati√®re
 * @route  PUT /api/pathways/subjects/:subjectId
 * @access Admin
 */
export const updateSubjectController = async (req, res) => {
  try {
    const { subjectId } = req.params;
    const { subjectName } = req.body;

    const updated = await updateSubject(subjectId, subjectName);
    res.status(200).json(updated);
  } catch (error) {
    console.error("‚ùå Erreur lors de la modification de la mati√®re :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚ùå Supprimer une mati√®re
 * @route  DELETE /api/pathways/subjects/:subjectId
 * @access Admin
 */
export const deleteSubjectController = async (req, res) => {
  try {
    const { subjectId } = req.params;
    await deleteSubject(subjectId);
    res.status(200).json({ message: "Mati√®re supprim√©e avec succ√®s." });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de la mati√®re :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/* ========================================================
        Op√©rations CRUD Categories
======================================================== */

/**
 * üóÇÔ∏è R√©cup√©rer les cat√©gories d‚Äôune mati√®re
 * @route  GET /api/pathways/categories/:subjectId
 * @access Admin
 */
export const getCategoriesBySubject = async (req, res) => {
  try {
    const { subjectId } = req.params;
    const categories = await getCategoriesBySubjectId(subjectId);
    res.status(200).json(categories);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des cat√©gories :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚ûï Cr√©er une cat√©gorie
 * @route  POST /api/pathways/categories
 * @access Admin
 */
export const createCategoryController = async (req, res) => {
  try {
    const { subjectId, categoryName } = req.body;

    if (!subjectId || !categoryName) {
      return res.status(400).json({ error: "Tous les champs sont obligatoires." });
    }

    const category = await createCategory(subjectId, categoryName);
    res.status(201).json(category);
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de la cat√©gorie :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚úèÔ∏è Modifier une cat√©gorie
 * @route  PUT /api/pathways/categories/:categoryId
 * @access Admin
 */
export const updateCategoryController = async (req, res) => {
  try {
    const { categoryId } = req.params;
    const { categoryName } = req.body;

    const updated = await updateCategory(categoryId, categoryName);
    res.status(200).json(updated);
  } catch (error) {
    console.error("‚ùå Erreur lors de la modification de la cat√©gorie :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚ùå Supprimer une cat√©gorie
 * @route  DELETE /api/pathways/categories/:categoryId
 * @access Admin
 */
export const deleteCategoryController = async (req, res) => {
  try {
    const { categoryId } = req.params;
    await deleteCategory(categoryId);
    res.status(200).json({ message: "Cat√©gorie supprim√©e avec succ√®s." });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de la cat√©gorie :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/* ========================================================
        Op√©rations CRUD Themes
======================================================== */

/**
 * üéØ R√©cup√©rer les th√®mes d‚Äôune cat√©gorie
 * @route  GET /api/pathways/themes/:categoryId
 * @access Admin
 */
export const getThemesByCategory = async (req, res) => {
  try {
    const { categoryId } = req.params;
    const themes = await getThemesByCategoryId(categoryId);
    res.status(200).json(themes);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des th√®mes :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚ûï Cr√©er un th√®me
 * @route  POST /api/pathways/themes
 * @access Admin
 */
export const createThemeController = async (req, res) => {
  try {
    const { categoryId, themeName } = req.body;

    if (!categoryId || !themeName) {
      return res.status(400).json({ error: "Tous les champs sont obligatoires." });
    }

    const theme = await createTheme(categoryId, themeName);
    res.status(201).json(theme);
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation du th√®me :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚úèÔ∏è Modifier un th√®me
 * @route  PUT /api/pathways/themes/:themeId
 * @access Admin
 */
export const updateThemeController = async (req, res) => {
  try {
    const { themeId } = req.params;
    const { themeName } = req.body;

    const updated = await updateTheme(themeId, themeName);
    res.status(200).json(updated);
  } catch (error) {
    console.error("‚ùå Erreur lors de la modification du th√®me :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚ùå Supprimer un th√®me
 * @route  DELETE /api/pathways/themes/:themeId
 * @access Admin
 */
export const deleteThemeController = async (req, res) => {
  try {
    const { themeId } = req.params;
    await deleteTheme(themeId);
    res.status(200).json({ message: "Th√®me supprim√© avec succ√®s." });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression du th√®me :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/* ========================================================
        R√©cup√©ration des classes pour le user
======================================================== */

/**
 * üìö R√©cup√©rer la liste des classes
 * @route  GET /api/pathways/classes
 * @access Admin
 */
export const getClasses = async (req, res) => {
  try {
    const classes = await getAllClasses();

    if (!classes || classes.length === 0) {
      return res.status(404).json({ error: "Aucune classe trouv√©e." });
    }

    res.status(200).json(classes.map((c) => c.className));
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des classes :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/* ========================================================
        Contenu d‚Äôun Pathway (le√ßons + exercices)
======================================================== */

/**
 * üìñ R√©cup√©rer le contenu d‚Äôun pathway
 * @route  GET /api/pathways/:pathwayId/content
 * @access Admin
 */
export const getPathwayContentController = async (req, res) => {
  try {
    const { pathwayId } = req.params;
    const content = await getPathwayContent(pathwayId);
    res.status(200).json(content);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration du contenu du pathway :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * üì¶ R√©cup√©rer tous les parcours avec le√ßons et exercices
 * @route  GET /api/pathways
 * @access Admin
 */
export const getAllPathwaysController = async (req, res) => {
  try {
    const pathways = await getPathwaysWithRelations();
    res.status(200).json(pathways);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration des parcours :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * ‚úèÔ∏è Mettre √† jour le contenu d‚Äôun pathway
 * @route  PUT /api/pathways/:pathwayId/content
 * @access Admin
 */
export const updatePathwayContentController = async (req, res) => {
  try {
    const { pathwayId } = req.params;
    const { title, lessons, exercises } = req.body;

    if (!title || !Array.isArray(lessons) || !Array.isArray(exercises)) {
      return res.status(400).json({ error: "Donn√©es de mise √† jour incompl√®tes." });
    }

    const result = await updatePathwayContent(pathwayId, title, lessons, exercises);
    res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Erreur mise √† jour du contenu du pathway :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};
