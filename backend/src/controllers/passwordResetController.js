import { findUserByEmail, updateUser } from "../models/userModel.js";
import {
  generatePasswordResetToken,
  verifyPasswordResetToken,
  deletePasswordResetToken,
} from "../models/passwordResetTokenModel.js";
import { sendResetEmail } from "../utils/emailService.js"; // ‚úÖ V√©rification que l'import est pr√©sent
import argon2 from "argon2";

/**
 * üì© Demande de r√©initialisation de mot de passe
 * @route  POST /auth/request-password-reset
 * @access Public
 */
export const requestPasswordReset = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await findUserByEmail(email);

    if (!user) {
      return res.status(404).json({ error: "Utilisateur non trouv√©." });
    }

    const token = await generatePasswordResetToken(user.id);

    // ‚úÖ Simulation d'envoi d'email
    await sendResetEmail(email, token);

    // ‚úÖ Ajout d'un log pour tester le lien en dev
    console.log(`üì© Lien de r√©initialisation : http://localhost:5173/reset-password?token=${token}`);

    res.status(200).json({ message: "Email de r√©initialisation envoy√©." });
  } catch (error) {
    console.error("‚ùå Erreur lors de la demande de r√©initialisation :", error);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

/**
 * üîÑ R√©initialisation du mot de passe avec un token valide
 * @route  POST /auth/reset-password
 * @access Public
 */
export const resetPassword = async (req, res) => {
  try {
    const { token, newPassword } = req.body;

    // ‚úÖ V√©rifier si le token est valide
    const userId = await verifyPasswordResetToken(token);

    // ‚úÖ Hacher le nouveau mot de passe et l'enregistrer
    const hashedPassword = await argon2.hash(newPassword);
    await updateUser(userId, { password: hashedPassword });

    // ‚úÖ Supprimer le token apr√®s utilisation
    await deletePasswordResetToken(token);

    res.status(200).json({ message: "Mot de passe r√©initialis√© avec succ√®s !" });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©initialisation du mot de passe :", error);
    res.status(400).json({ error: error.message || "Erreur lors de la r√©initialisation du mot de passe." });
  }
};
