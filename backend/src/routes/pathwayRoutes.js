import express from "express";
import {
  getPathways,
  getPathway,
  getPathwaysByThemeId,
  getLessonsFromPathway,
  createNewPathway,
  editPathway,
  removePathway,
  getPathwayWithRelationsController
} from "../controllers/pathwayController.js";
import { authenticateToken, isAdmin } from "../middlewares/authMiddleware.js";

const router = express.Router();

/* ==========================
   ğŸ”¹ Routes pour la gestion des parcours
   ========================== */

// ğŸ”¹ RÃ©cupÃ©rer tous les parcours (accessible aux admins uniquement)
router.get("/", authenticateToken, isAdmin, getPathways);

// ğŸ”¹ RÃ©cupÃ©rer un parcours par ID (accessible aux admins uniquement)
router.get("/:id", authenticateToken, isAdmin, getPathway);

// ğŸ”¹ RÃ©cupÃ©rer tous les parcours d'un thÃ¨me donnÃ© (accessible aux admins uniquement)
router.get("/theme/:themeId", authenticateToken, isAdmin, getPathwaysByThemeId);

// ğŸ”¹ RÃ©cupÃ©rer les leÃ§ons dâ€™un parcours (accessible aux admins uniquement)
router.get("/:id/lessons", authenticateToken, isAdmin, getLessonsFromPathway);

// ğŸ”¹ CrÃ©er un nouveau parcours (accessible aux admins uniquement)
router.post("/", authenticateToken, isAdmin, createNewPathway);

// ğŸ”¹ Modifier un parcours existant (accessible aux admins uniquement)
router.put("/:id", authenticateToken, isAdmin, editPathway);

// ğŸ”¹ Supprimer un parcours (accessible aux admins uniquement)
router.delete("/:id", authenticateToken, isAdmin, removePathway);

// ğŸ”¹ Route pour rÃ©cupÃ©rer un parcours avec toutes ses relations
router.get("/:id/full", getPathwayWithRelationsController);

export default router;
